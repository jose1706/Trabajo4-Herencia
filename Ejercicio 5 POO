/*Clase 1: Principal*/

package Personas;
/*Esta es la clase principal en donde se hace visible la ventana de la aplicación*/
public class Principal {
    public static void main(String[] args) {
        VentanaPrincipal miVentanaPrincipal;
        miVentanaPrincipal= new VentanaPrincipal();
        miVentanaPrincipal.setVisible(true);
    }
}

/*Clase 2: Persona*/

package Personas;

public class Persona {
    String nombre;
    String apellidos;
    String teléfono;
    String dirección;
    //Constructor
    public Persona(String nombre, String apellidos, String teléfono,
                   String dirección) {
        this.nombre = nombre;
        this.apellidos = apellidos;
        this.teléfono = teléfono;
        this.dirección = dirección;
    }
}

/*Clase 3: ListaPersonas*/

package Personas;
import java.util.*;
//Clase para vector
public class ListaPersonas {
    Vector listaPersonas; // Atributo que identifica un vector de personas
    //Constructor
    public ListaPersonas() {
        listaPersonas = new Vector(); // Crea el vector de personas
    }

    //Método que permite agregar una persona al vector de personas
    public void añadirPersona(Persona p) {
        listaPersonas.add(p);
    }

    // Método que permite eliminar una persona del vector de personas
    public void eliminarPersona(int i) {
        listaPersonas.removeElementAt(i);
    }

    //Método que permite eliminar todos los elementos del vector de
    public void borrarLista() {
        listaPersonas.removeAllElements();
    }
}

/*Clase 4: VentanaPrincipal*/

package Personas;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

// Esta clase define una interfaz gráfica
public class VentanaPrincipal extends JFrame implements
        ActionListener {
    private ListaPersonas lista;
    private Container contenedor;
    private JLabel nombre, apellidos, teléfono, dirección;
    // Campos de ingreso de texto
    private JTextField campoNombre, campoApellidos, campoTeléfono,
            campoDirección;
    private JButton añadir, eliminar, borrarLista, cerrar; // Botones
    private JList listaNombres; // Lista de personas
    private DefaultListModel modelo; // Objeto que modela la lista
    private JScrollPane scrollLista; // Barra de desplazamiento vertical

    /**
     * Constructor de la clase VentanaPrincipal
     */
    public VentanaPrincipal(){
        lista = new ListaPersonas(); // Crea la lista de personas
        inicio();
        setTitle("Personas"); // Establece el título de la ventana
        setSize(300,385); // Establece el tamaño de la ventana
        setLocationRelativeTo(null); // La ventana se posiciona en el centro de la pantalla
// Establece que el botón de cerrar permitirá salir de la aplicación
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false); //Establece que el tamaño de la ventana
    }

    //Método que crea la ventana con sus diferentes componentes gráficos
    private void inicio() {
        contenedor = getContentPane(); /* Obtiene el panel de contenidos de la ventana */
        contenedor.setLayout(null); /* Establece que el panel no tiene asociado ningún layout */
// Establece la etiqueta y el campo nombre
        nombre = new JLabel();
        nombre.setText("Nombre:");
        nombre.setBounds(3, 20, 135, 23); // Establece la posición de la etiqueta nombre
        campoNombre = new JTextField();
// Establece la posición del campo de texto nombre
        campoNombre.setBounds(80, 20, 200, 23);
// Establece la etiqueta y el campo apellidos
        apellidos = new JLabel();
        apellidos.setText("Apellidos:"); // Establece la posición de la etiqueta apellidos
        apellidos.setBounds(3, 50, 200, 23);
        campoApellidos = new JTextField();
// Establece la posición del campo de texto apellidos
        campoApellidos.setBounds(80, 50, 200, 23);

// Establece la etiqueta y el campo teléfono
        teléfono = new JLabel();
        teléfono.setText("Teléfono:");
        teléfono.setBounds(3, 80, 135, 23); // Establece la posición de la etiqueta teléfono
        campoTeléfono = new JTextField();
// Establece la posición del campo de texto teléfono
        campoTeléfono.setBounds(80, 80, 200, 23);
// Establece la etiqueta y el campo dirección
        dirección = new JLabel();
        dirección.setText("Dirección:");
        dirección.setBounds(3, 110, 135, 23); // Establece la posición de la etiqueta dirección
        campoDirección = new JTextField();
// Establece la posición del campo de texto dirección
        campoDirección.setBounds(80, 110, 200, 23);
// Establece el botón Añadir persona
        añadir = new JButton();
        añadir.setText("Añadir");
        añadir.setBounds(3, 150, 80, 23); // Establece la posición del botón Añadir persona
/* Agrega al botón un ActionListener para que gestione eventos del botón */
        añadir.addActionListener(this);
// Establece el botón Eliminar persona
        eliminar= new JButton();
        eliminar.setText("Eliminar");
        eliminar.setBounds(3, 280, 80, 23); // Establece la posición del botón Eliminar persona
/* Agrega al botón un ActionListener para que gestione eventos del botón */
        eliminar.addActionListener(this);
// Establece el botón Borrar lista
        borrarLista= new JButton();
        borrarLista.setText("Borrar Lista");
        borrarLista.setBounds(160, 280, 120, 23); /* Establece la
posición del botón Borrar lista */
/* Agrega al botón un ActionListener para que gestione eventos del botón */
        borrarLista.addActionListener(this);
// Establece el botón cerrar
        cerrar= new JButton();
        cerrar.setText("Cerrar");
        cerrar.setBounds(3, 320, 80, 23);/* Establece la
posición del botón Cerrar lista */
/* Agrega al botón un ActionListener para que gestione eventos del botón */
        cerrar.addActionListener(this);
// Establece la lista gráfica de personas
        listaNombres = new JList();
/* Establece que se pueda seleccionar solamente un elemento de la lista */
        listaNombres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        modelo = new DefaultListModel();
// Establece una barra de desplazamiento vertical
        scrollLista = new JScrollPane();
// Establece la posición de la barra de desplazamiento vertical
        scrollLista.setBounds(3, 190 ,277, 80);
// Asocia la barra de desplazamiento vertical a la lista de personas
        scrollLista.setViewportView(listaNombres);
// Se añade cada componente gráfico al contenedor de la ventana
        contenedor.add(nombre);
        contenedor.add(campoNombre);
        contenedor.add(apellidos);
        contenedor.add(campoApellidos);
        contenedor.add(teléfono);
        contenedor.add(campoTeléfono);
        contenedor.add(dirección);
        contenedor.add(campoDirección);
        contenedor.add(añadir);
        contenedor.add(eliminar);
        contenedor.add(borrarLista);
        contenedor.add(cerrar);
        contenedor.add(scrollLista);
    }
    /* Método para gestionar las acciones de los botones */
    @Override
    public void actionPerformed(ActionEvent evento) {
        if (evento.getSource() == añadir) { // Si se pulsa el botón añadir
            añadirPersona(); // Se invoca añadir persona
        }
        if (evento.getSource() == eliminar) { //Si se pulsa el botón eliminar
            eliminarNombre(listaNombres.getSelectedIndex() );
        }

        if (evento.getSource() == borrarLista) { // Si se pulsa el botón borrar lista
            borrarLista(); // Se invoca borrar lista
        }

        if (evento.getSource() == cerrar){ // si se pulsa el botón Cerrar
            System.exit(0);
        }
    }

    // Método que agrega una persona al vector de personas y a la lista
    private void añadirPersona() {
/* Se obtienen los campos de texto ingresados y se crea una persona */
        Persona p = new Persona(campoNombre.getText(),
                campoApellidos.getText(),
                campoTeléfono.getText(), campoDirección.getText());
        lista.añadirPersona(p); /* Se añade una persona al vector de personas */
        String elemento = campoNombre.getText() + "; " + campoApellidos.getText() + "; " + campoTeléfono.getText() + "; " + campoDirección.getText();
        modelo.addElement(elemento); /* Se agrega el texto con los datos de la persona al JList */
        listaNombres.setModel(modelo);
// Se colocan todos los campos de texto nulos
        campoNombre.setText("");
        campoApellidos.setText("");
        campoTeléfono.setText("");
        campoDirección.setText("");
    }

    // Método que elimina una persona del vector de personas y de la
    private void eliminarNombre(int indice) {
        if (indice >= 0) { // Si la posición existe
            modelo.removeElementAt(indice); /* Se elimina la persona seleccionada de la lista gráfica */
            lista.eliminarPersona(indice); /* Se elimina la persona seleccionada del vector de personas */
        } else { /* Si no se seleccionó ninguna persona, se genera un mensaje de error */
            JOptionPane.showMessageDialog(null, "Debe seleccionar un elemento","Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    //Método que elimina todas las personas del vector de personas
    private void borrarLista() {
        lista.borrarLista(); // Se eliminan todas las personas del vector
        modelo.clear(); // Limpia el JList, la lista gráfica de personas
    }
}
